# Nerdbuntu Configuration Template for MD to Qdrant Importer
# This file shows what configuration options are available
# The actual .env file is created by setup.sh when you enter your Azure credentials
# ============================================================
# AZURE AI CONFIGURATION (Required)
# ============================================================
# Get these from Azure Portal > Your AI Service > Keys and Endpoint

# Your Azure OpenAI or AI Services endpoint
# Example: https://your-service.openai.azure.com/
AZURE_ENDPOINT=https://your-service.openai.azure.com/

# Your Azure API key (from Keys and Endpoint page)
AZURE_API_KEY=your-api-key-here

# Your deployment name (the model you deployed)
# Common values: gpt-4o, gpt-4, gpt-35-turbo
AZURE_DEPLOYMENT_NAME=gpt-4o

# API Version for Azure OpenAI
AZURE_API_VERSION=2024-02-15-preview

# ============================================================
# QDRANT CONFIGURATION
# ============================================================
# Qdrant is already running locally - these are the connection settings
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_GRPC_PORT=6334

# Collection naming prefix (collections will be: {prefix}_general, {prefix}_npcs, etc.)
# This allows multiple game systems in same Qdrant instance
QDRANT_COLLECTION_PREFIX=game

# ============================================================
# APPLICATION SETTINGS
# ============================================================
# Directory paths (relative to project root)
INPUT_DIRECTORY=./input_md_files
OUTPUT_DIRECTORY=./output_logs

# ============================================================
# PROCESSING SETTINGS
# ============================================================
# Size of text chunks for semantic processing (in characters)
CHUNK_SIZE=1000

# Overlap between chunks to maintain context
CHUNK_OVERLAP=200

# Maximum number of key concepts to extract
MAX_CONCEPTS=10

# Embedding model for vector similarity
# See: https://www.sbert.net/docs/pretrained_models.html
# all-MiniLM-L6-v2: Good balance of speed and quality (384 dimensions)
# all-mpnet-base-v2: Higher quality, slower (768 dimensions)
EMBEDDING_MODEL=all-MiniLM-L6-v2

# Vector dimension (must match embedding model output)
# all-MiniLM-L6-v2 = 384, all-mpnet-base-v2 = 768
VECTOR_DIMENSION=384

# ============================================================
# NPC EXTRACTION SETTINGS
# ============================================================
# Enable intelligent NPC extraction using Azure AI
ENABLE_NPC_EXTRACTION=true

# Minimum confidence score for NPC extraction (0.0 to 1.0)
# Higher values = more accurate but may miss some NPCs
# Lower values = more NPCs found but may include false positives
NPC_CONFIDENCE_THRESHOLD=0.7

# ============================================================
# NOTES
# ============================================================
# - Don't commit this file with your actual credentials
# - The .env file is in .gitignore for security
# - Run ./setup.sh to create your .env file with your credentials
# - To change settings, edit .env directly (not this template)
#
# Collections created:
#   - {prefix}_general: General game content
#   - {prefix}_npcs: Extracted NPC stat blocks with canonical: true
#   - {prefix}_rulebooks: Core rulebook content
#   - {prefix}_adventurepaths: Adventure and campaign content
#
# The system automatically detects content type based on:
#   - Filename patterns (e.g., "rulebook", "adventure path")
#   - Content analysis (stat blocks, rules text, etc.)
#   - Azure AI classification for NPCs
